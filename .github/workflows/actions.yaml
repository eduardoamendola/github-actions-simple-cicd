name: Build and Publish

on:
  # run it on push to the default repository branch
  push:
    branches: [ main ]
  # run it during pull request
  pull_request:

env:
  IMAGE_NAME: bitcoin
  IMAGE_VERSION: 0.21.0

jobs:
  # define job to build and publish docker image
  build-test-and-push-docker-image:
    name: Build Docker image, test security with Grype, and push it to DockerHub
    runs-on: ubuntu-latest
    env:
      WORKDIR: ./docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      #      - name: Login to Github Packages
      #        uses: docker/login-action@v1
      #        with:
      #          registry: ghcr.io
      #          username: ${{ github.actor }}
      #          password: ${{ secrets.GHCR_PAT }}

      - name: Build local container
        uses: docker/build-push-action@v2
        with:
          context: ${{ env.WORKDIR }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
          push: false
          load: true

      - name: Scan image
        uses: anchore/scan-action@v3
        with:
          image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
          fail-build: true
          severity-cutoff: medium

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Docker Push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}

      #       WORKS BEAUTIFULY
      #      - name: Build image and push to Docker Hub and GitHub Container Registry
      #        uses: docker/build-push-action@v2
      #        with:
      #          # relative path to the place where source code with Dockerfile is located
      #          context: ./docker
      #          # Note: tags has to be all lower-case
      #          tags: |
      #            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
      #          # build on feature branches, push only on main branch
      #          push: ${{ github.ref == 'refs/heads/main' }}

  plan-test-and-apply-terraform:
    name: Terraform plan, test and apply
    runs-on: ubuntu-latest
    run:
      working-directory: ${{ env.WORKDIR }}
    env:
      WORKDIR: ./terraform
      TF_VERSION: 1.0.0
      AWS_REGION: ap-southeast-2
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: false
        working-directory: ${{ env.WORKDIR }}
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

##
###    - name: Terraform Apply
###      uses: hashicorp/terraform-github-actions/apply@v0.4.0
###      env:
###        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
###        TF_ACTION_WORKING_DIR: 'terraform'
###        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
###        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
##
##    - name: Terraform apply
##      id: apply
##      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
##      run: terraform apply -auto-approve -input=false
##      working-directory: ${{ env.working-directory }}
##      env:
##        TF_VAR_assume_role: "my-github-actions-role"
##
