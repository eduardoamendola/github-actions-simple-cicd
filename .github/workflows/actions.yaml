name: Build and Publish

on:
  # run it on push to the default repository branch
  push:
    branches: [ main ]
  # run it during pull request
  pull_request:

jobs:
  # define job to build and publish docker image
  build-and-push-docker-image:
    name: Build Docker image and push to repositories
    # run only when code is compiling and tests are passing
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: bitcoin
      IMAGE_VERSION: 0.21.0
    # steps to perform in job
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # setup Docker buld action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to Github Packages
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

# WORKS BEAUTIFULY
#      - name: Build image and push to Docker Hub and GitHub Container Registry
#        uses: docker/build-push-action@v2
#        with:
#          # relative path to the place where source code with Dockerfile is located
#          context: ./docker
#          # Note: tags has to be all lower-case
#          tags: |
#            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
#          # build on feature branches, push only on main branch
#          push: ${{ github.ref == 'refs/heads/main' }}

      - name: Build local container
        uses: docker/build-push-action@v2
        with:
          context: ./docker
          tags: localbuild/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
          push: false
          load: true

      - name: Scan image
        uses: anchore/scan-action@v3
        with:
          image: localbuild/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}
          fail-build: true
          severity-cutoff: medium

      - name: Docker Push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}

#
#      - name: Image digest
#        run: echo ${{ steps.docker_build.outputs.digest }}

#      - name: Build the container image
#        uses: actions/checkout@v2
##        run: docker build . --file Dockerfile --tag localbuild/testimage:latest
#        run: docker build -f Dockerfile --tag localbuild/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }} .

#        grype eduardoamendola/$IMAGE_NAME:$IMAGE_VERSION --fail-on medium
#        docker run -it eduardoamendola/$IMAGE_NAME:$IMAGE_VERSION

#      - uses: anchore/scan-action@v3
#        with:
#          image: "localbuild/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}"
#          fail-build: true

#  terraform:
#    name: Simple CICD for Xapo
#    runs-on: ubuntu-latest
#    env:
#      working-directory: terraform
#      TF_WORKSPACE: my-workspace
#    steps:
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-region: ap-southeast-2
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#      - name: Checkout Repo
#        uses: actions/checkout@v2
#
##    - uses: hashicorp/setup-terraform@v1
##      with:
##        terraform_version: 1.0.0
##
##    - name: Terraform Fmt
##      id: fmt
##      run: terraform fmt -check
##      continue-on-error: true
##
###    - name: Terraform Init
###      uses: hashicorp/terraform-github-actions/init@v0.4.0
###      env:
###        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
###        TF_ACTION_WORKING_DIR: 'terraform'
###        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
###        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
##
##    - name: Terraform init
##      id: init
##      run: terraform init
##      working-directory: ${{ env.working-directory }}
###      env:
###        TF_CLI_ARGS_init: "-backend-config=role_arn=arn:aws:iam::99999999:role/my-github-actions-role -upgrade -reconfigure"
###        TF_VAR_assume_role: "my-github-actions-role"
##
##    - name: Terraform validate
##      id: validate
##      run: terraform validate
##
###    - name: Terraform Validate
###      uses: hashicorp/terraform-github-actions/validate@v0.3.7
##
##    - name: Terraform plan
##      id: plan
##      run: terraform plan -no-color
##      working-directory: ${{ env.working-directory }}
##      env:
##        TF_VAR_assume_role: "my-github-actions-role"
##
##    - name: Plan output
##      id: output
##      uses: actions/github-script@v3
##      if: github.event_name == 'pull_request'
##      env:
##        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
##      with:
##        github-token: ${{ secrets.GITHUB_TOKEN }}
##        script: |
##          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
##          ### Workspace
##          \`${process.env.TF_WORKSPACE}\`
##          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
##          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
##          <details><summary>Show Plan</summary>
##          \`\`\`hcl
##          ${process.env.PLAN}
##          \`\`\`
##          </details>
##          **Pusher**: @${{ github.actor }}
##          **Action**: ${{ github.event_name }}
##          `;
##          github.issues.createComment({
##            issue_number: context.issue.number,
##            owner: context.repo.owner,
##            repo: context.repo.repo,
##            body: output
##          })
##
###    - name: Terraform Apply
###      uses: hashicorp/terraform-github-actions/apply@v0.4.0
###      env:
###        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
###        TF_ACTION_WORKING_DIR: 'terraform'
###        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
###        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
##
##    - name: Terraform apply
##      id: apply
##      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
##      run: terraform apply -auto-approve -input=false
##      working-directory: ${{ env.working-directory }}
##      env:
##        TF_VAR_assume_role: "my-github-actions-role"
##
